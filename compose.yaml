# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  db:
    image: postgres:15-alpine
    container_name: chat-database
    restart: unless-stopped
    environment:
      - POSTGRES_DB=spring_chatdb
      - POSTGRES_USER=springuser
      - POSTGRES_PASSWORD=root
    ports:
      - 5432:5432
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - react-spring

  server:
    container_name: chat-backend
    restart: always
    build:
      context: .
    ports:
      - 8080:8080
    environment:
      - POSTGRES_URL=jdbc:postgresql://db:5432/spring_chatdb
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=postgres
    depends_on:
      db:
        condition: service_healthy
    networks:
      - react-spring

  frontend:
    container_name: chat-frontend
    build:
      context: chat-frontend
      dockerfile: Dockerfile.dev
    ports:
      - 3000:3000
    volumes:
      - ./chat-frontend:/usr/src/app
      - /usr/src/app/node_modules
    command: ['npm', 'run', 'dev', '--', '--host']
    depends_on:
      - server
    networks:
      - react-spring

volumes:
  db-data:

networks:
  react-spring: {}
